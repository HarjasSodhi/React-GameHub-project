{"version":3,"sources":["images/tictactoe.png","images/matchIt.png","images/hilow.png","images/sudoku.png","Home/MainPage.jsx","TicTacToe/Block.jsx","TicTacToe/TicTacToe.jsx","Hi-Low/Deck.jsx","Hi-Low/Card.jsx","Hi-Low/HiLow.js","Sudoku/SudokuBlock.jsx","Sudoku/IndexBar.jsx","Sudoku/Loading.jsx","Sudoku/NumBar.jsx","Sudoku/SudokuGrid.jsx","App.js","index.js"],"names":["MainPage","className","speed","Delay","ms","onClick","window","location","href","src","matchIt","to","hilow","sudoku","tictactoe","Block","props","GameOver","alert","Grid","Key","temp","map","el","currPlayer","setGrid","blocks","document","querySelectorAll","blocks2D","checkArr","i","Math","floor","push","style","color","setStatus","setGameOver","r","c","rowWin","colWin","length","allFilled","checkWinner","setcurrPlayer","TicTacToe","useState","Status","Deck","Card","suit","num","CurrCard","setCurrCard","Cards","setCards","CurrScore","setCurrScore","colors","CardValue","suits","numbers","this","shuffleDeck","arr","n","idx","random","generateCard","console","log","pop","useEffect","DeckArr","j","createDeck","newCard","HiLow","path","SudokuBlock","isValidHelper","grid","currNum","blocksArr","index","tempArr","isRow","setTimeout","isCol","isMat","x","y","AllFilled","setScore","e","currentTarget","innerText","puzzle","isValid","setPuzzle","Score","fixedPuzzle","value","IndexBar","selector","useStyles","makeStyles","theme","backdrop","zIndex","drawer","background","SimpleBackdrop","classes","Backdrop","open","CircularProgress","NumBar","undefined","OldTarget","setOldTarget","backgroundColor","setcurrNum","SudokuGrid","setfixedPuzzle","Sol","setSol","GenerateSudoku","difficulty","obj","fetch","then","data","json","newArrr","board","params","method","body","Object","keys","key","reduce","result","row","encodeURIComponent","join","headers","response","solution","SolveSudoku","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1467f369.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tictactoe.d970a1f5.png\";","export default __webpack_public_path__ + \"static/media/matchIt.d417cd37.png\";","export default __webpack_public_path__ + \"static/media/hilow.bb455948.png\";","export default __webpack_public_path__ + \"static/media/sudoku.931e120b.png\";","import tictactoe from \"../images/tictactoe.png\"\r\nimport matchIt from \"../images/matchIt.png\"\r\nimport hilow from \"../images/hilow.png\"\r\nimport sudoku from \"../images/sudoku.png\"\r\nimport \"./MainPage.css\"\r\nimport Typing from 'react-typing-animation';\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nlet MainPage = () => {\r\n    return (\r\n        <div className='box'>\r\n            <div className=\"header\">\r\n                <Typing speed={125}>\r\n                    <Typing.Delay ms={1000} />\r\n                    GameHub\r\n                </Typing>\r\n            </div>\r\n            <div className=\"content\">\r\n                <div className=\"game\" onClick={() => {\r\n                    window.location.href = 'https://harjassodhi.github.io/Match-it-Game/';\r\n                }}>\r\n\r\n                    <div className=\"img\">\r\n                        <img src={matchIt} className=\"tag\" />\r\n                    </div>\r\n                    <div className=\"name\">Match-It</div>\r\n\r\n                </div>\r\n                <div className=\"game\">\r\n                    <Link to=\"/HiLow\">\r\n                        <div className=\"img\">\r\n                            <img src={hilow} className=\"tag\" />\r\n                        </div>\r\n                        <div className=\"name\">High-Low</div>\r\n                    </Link>\r\n                </div>\r\n\r\n                <div className=\"game\">\r\n                    <Link to=\"/Sudoku\">\r\n                        <div className=\"img\">\r\n                            <img src={sudoku} className=\"tag\" />\r\n                        </div>\r\n                        <div className=\"name\">Sudoku</div>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"game\">\r\n                    <Link to=\"/TicTacToe\">\r\n                        <div className=\"img\">\r\n                            <img src={tictactoe} className=\"tag\" />\r\n                        </div>\r\n                        <div className=\"name\">Tic Tac Toe</div>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MainPage;","let Block = (props) => {\r\n\r\n    function checkWinner(currPlayer, temp) {\r\n        let blocks = document.querySelectorAll('.TicTacToeblock');\r\n        let blocks2D = [[blocks[0], blocks[1], blocks[2]], [blocks[3], blocks[4], blocks[5]], [blocks[6], blocks[7], blocks[8]]];\r\n        let checkArr = [[], [], []];\r\n        for (let i = 0; i < 9; i++) {\r\n            let r = Math.floor(i / 3);\r\n            checkArr[r].push(temp[i]);\r\n        }\r\n\r\n        if (props.Key % 2 === 0) {\r\n            if ((checkArr[0][0] === currPlayer && checkArr[1][1] === currPlayer && checkArr[2][2] === currPlayer) || (checkArr[0][2] === currPlayer && checkArr[1][1] === currPlayer && checkArr[2][0] === currPlayer)) {\r\n                if ((checkArr[0][0] === currPlayer && checkArr[1][1] === currPlayer && checkArr[2][2] === currPlayer)) {\r\n                    blocks[0].style.color = 'green'\r\n                    blocks[4].style.color = 'green'\r\n                    blocks[8].style.color = 'green'\r\n                }\r\n                else {\r\n                    blocks[2].style.color = 'green'\r\n                    blocks[4].style.color = 'green'\r\n                    blocks[6].style.color = 'green'\r\n                }\r\n                props.setStatus(`Player: ${currPlayer} wins!!`)\r\n                props.setGameOver(true);\r\n                return -1\r\n            }\r\n        }\r\n        let r = Math.floor(props.Key / 3);\r\n        let c = props.Key % 3\r\n\r\n        let rowWin = true;\r\n        let colWin = true;\r\n        for (let i = 0; i < 3; i++) {\r\n            if (checkArr[r][i] !== currPlayer) rowWin = false;\r\n            if (checkArr[i][c] !== currPlayer) colWin = false;\r\n        }\r\n        if (rowWin || colWin) {\r\n            if (rowWin) {\r\n                for (let i = 0; i < blocks2D.length; i++) {\r\n                    blocks2D[r][i].style.color = \"green\";\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0; i < blocks2D.length; i++) {\r\n                    blocks2D[i][c].style.color = \"green\";\r\n                }\r\n            }\r\n            props.setStatus(`Player: ${currPlayer} wins!!`)\r\n            props.setGameOver(true);\r\n            return -1\r\n        }\r\n\r\n\r\n        let allFilled = true;\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] === \"\") allFilled = false;\r\n        }\r\n\r\n        if (allFilled) {\r\n            props.setStatus(\"Game Draw\");\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"TicTacToeblock\" onClick={\r\n            () => {\r\n                if (!props.GameOver) {\r\n                    if (props.Grid[props.Key] == '') {\r\n\r\n                        let temp = props.Grid.map((el) => {\r\n                            return el;\r\n                        })\r\n                        if (temp[props.Key] === '') temp[props.Key] = props.currPlayer;\r\n\r\n                        props.setGrid(temp);\r\n                        let check = checkWinner(props.currPlayer, temp);\r\n\r\n                        if (check !== -1) {\r\n                            if (props.currPlayer === \"X\") {\r\n                                props.setcurrPlayer(\"O\");\r\n                                props.setStatus(\"Turn: Player O\")\r\n                            }\r\n                            else {\r\n                                props.setcurrPlayer(\"X\");\r\n                                props.setStatus(\"Turn: Player X\")\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Game Over. Reset Game To Start Again\");\r\n                }\r\n            }\r\n        }>{props.Grid[props.Key]}</div>\r\n    )\r\n}\r\nexport default Block;","import { useState } from \"react\";\r\nimport Block from \"./Block\";\r\n// import \"./TicTacToe.css\";\r\nlet TicTacToe = () => {\r\n    const [GameOver, setGameOver] = useState(false);\r\n    const [Grid, setGrid] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n    const [currPlayer, setcurrPlayer] = useState(\"X\");\r\n    const [Status, setStatus] = useState(\"Turn : Player X\");\r\n    let i = -1;\r\n    return (\r\n        <div className='TicTacToeBody'>\r\n            <div className=\"StatusBar\">{Status}</div>\r\n            <div className=\"TicTacToecontainer\">\r\n                {\r\n                    Grid.map(() => {\r\n                        i++;\r\n                        return (\r\n                            <Block Grid={Grid} Key={i} setGrid={setGrid} currPlayer={currPlayer} setcurrPlayer={setcurrPlayer} setStatus={setStatus} GameOver={GameOver} setGameOver={setGameOver} />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div className=\"Reset\">\r\n                <button onClick={() => {\r\n                    let blocks = document.querySelectorAll('.TicTacToeblock');\r\n                    for(let i=0;i<blocks.length;i++)blocks[i].style.color='white'\r\n                    setGrid([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n                    setGameOver(false);\r\n                    setcurrPlayer(\"X\");\r\n                    setStatus(\"Turn : Player X\");\r\n                }}>Reset</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default TicTacToe;","// import \"./deck.css\"\r\nimport { Redirect,Link } from \"react-router-dom\";\r\nlet Deck = () => {\r\n    return (\r\n        <>\r\n            <Link to=\"/card\">\r\n                <img className=\"deck-img\" src=\"https://i.pinimg.com/564x/04/be/a8/04bea83ae8203e2a68b78696d35f8d18.jpg\" />\r\n            </Link>\r\n        </>\r\n    )\r\n}\r\nexport default Deck;","import { useEffect, useState } from \"react\";\r\n// import \"./card.css\"\r\nlet Card = () => {\r\n    const [CurrCard, setCurrCard] = useState({ suit: \"\", num: \"\" });\r\n    const [Cards, setCards] = useState([]);\r\n    const [CurrScore, setCurrScore] = useState(0);\r\n    let colors = {\r\n        \"♠\": \"black\", \"♣\": \"black\", \"♥\": \"red\", \"♦\": \"red\"\r\n    }\r\n    const CardValue = {\r\n        \"2\": 2,\r\n        \"3\": 3,\r\n        \"4\": 4,\r\n        \"5\": 5,\r\n        \"6\": 6,\r\n        \"7\": 7,\r\n        \"8\": 8,\r\n        \"9\": 9,\r\n        \"10\": 10,\r\n        \"J\": 11,\r\n        \"Q\": 12,\r\n        \"K\": 13,\r\n        \"A\": 14\r\n    }\r\n    const suits = [\"♠\", \"♣\", \"♥\", \"♦\"];\r\n    const numbers = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\r\n    class Deck {\r\n        constructor(suit, num) {\r\n            this.suit = suit;\r\n            this.num = num;\r\n        }\r\n    }\r\n\r\n    function createDeck() {\r\n        let DeckArr = [];\r\n        for (let i = 0; i < suits.length; i++) {\r\n            for (let j = 0; j < numbers.length; j++) {\r\n                DeckArr.push(new Deck(suits[i], numbers[j]));\r\n            }\r\n        }\r\n        shuffleDeck(DeckArr);\r\n        shuffleDeck(DeckArr);\r\n        shuffleDeck(DeckArr);\r\n        shuffleDeck(DeckArr);\r\n        setCurrCard(generateCard(DeckArr));\r\n        return DeckArr;\r\n    }\r\n\r\n    function shuffleDeck(arr) {\r\n        let n = arr.length;\r\n        for (let i = 0; i < n; i++) {\r\n            let idx = Math.floor(Math.random() * arr.length);\r\n            let temp = arr[i];\r\n            arr[i] = arr[idx];\r\n            arr[idx] = temp;\r\n        }\r\n    }\r\n\r\n    function generateCard(arr) {\r\n        console.log(arr.length);\r\n        let idx = Math.floor(Math.random() * arr.length);\r\n        let temp = arr[arr.length - 1];\r\n        arr[arr.length - 1] = arr[idx];\r\n        arr[idx] = temp;\r\n        return arr.pop();\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCards(createDeck());\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"HiLowscore\">Score: {CurrScore}</div>\r\n            <div className=\"Cardcontainer\">\r\n                <div className=\"currCard\">\r\n                    <div className={`suit ${colors[CurrCard.suit]}`}>{CurrCard.suit}</div>\r\n                    <div className={`value ${colors[CurrCard.suit]}`}>{CurrCard.num}</div>\r\n                    <div className={`rev-suit ${colors[CurrCard.suit]}`}>{CurrCard.suit}</div>\r\n                </div>\r\n                <div className=\"HiLowbtn-container\">\r\n                    <div className=\"high\" onClick={\r\n                        () => {\r\n                            let temp = CurrCard;\r\n                            if (Cards.length == 0) {\r\n                                alert(\"Deck is empty. Refresh page to Start a New Game. Your Final Score is: \" + CurrScore);\r\n                                return;\r\n                            }\r\n                            let newCard = generateCard(Cards);\r\n                            setCurrCard(newCard);\r\n                            setCards(Cards);\r\n                            if (CardValue[temp.num] <= CardValue[newCard.num]) {\r\n                                setCurrScore((CurrScore + 1));\r\n                            }\r\n                            else {\r\n                                setCurrScore((CurrScore - 1));\r\n                            }\r\n                        }\r\n                    }><span className=\"material-icons\">\r\n                            play_arrow\r\n                        </span></div>\r\n                    <div className=\"low\" onClick={\r\n                        () => {\r\n                            let temp = CurrCard;\r\n                            if (Cards.length == 0) {\r\n                                alert(\"Deck is empty. Refresh page to Start a New Game Your Final Score is: \" + CurrScore);\r\n                                return;\r\n                            }\r\n                            let newCard = generateCard(Cards);\r\n                            setCurrCard(newCard);\r\n                            setCards(Cards);\r\n                            if (CardValue[temp.num] >= CardValue[newCard.num]) {\r\n                                setCurrScore((CurrScore + 1));\r\n                            }\r\n                            else {\r\n                                setCurrScore((CurrScore - 1));\r\n                            }\r\n                        }\r\n                    }><span className=\"material-icons\">\r\n                            play_arrow\r\n                        </span></div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Card;","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Deck from \"./Deck\"\r\nimport Card from \"./Card\"\r\nimport MainPage from \"../Home/MainPage\";\r\n// import \"./hilow.css\"\r\nfunction HiLow() {\r\n    return (\r\n        <div className='hiLowContainer'>\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/card\"><Card /></Route>\r\n                    <Route path=\"/HiLow\"><Deck /></Route>\r\n                    <Route path=\"/\"><MainPage /></Route>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\nexport default HiLow;","let SudokuBlock = (props) => {\r\n    let isValid = (num) => {\r\n        let grid = [];\r\n        let index = 0;\r\n        for (let i = 0; i < 9; i++) {\r\n            let tempArr = [];\r\n            for (let j = 0; j < 9; j++) {\r\n                tempArr.push(props.puzzle[index]);\r\n                index++;\r\n            }\r\n            grid.push(tempArr);\r\n        }\r\n        let RecAns = isValidHelper(grid, num, props.idx);\r\n        return RecAns;\r\n    }\r\n\r\n    let isValidHelper = (grid, currNum, idx) => {\r\n        let blocks = document.querySelectorAll(\".s-Block\");\r\n        let blocksArr = [];\r\n        let index = 0;\r\n        for (let i = 0; i < 9; i++) {\r\n            let tempArr = [];\r\n            for (let j = 0; j < 9; j++) {\r\n                tempArr.push(blocks[index]);\r\n                index++;\r\n            }\r\n            blocksArr.push(tempArr);\r\n        }\r\n\r\n        let r = Math.floor(idx / 9);\r\n        let c = idx % 9\r\n        let isRow = true;\r\n        for (let i = 0; i < 9; i++) {\r\n            if (grid[r][i] == currNum) {\r\n                isRow = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!isRow) {\r\n            for (let i = 0; i < 9; i++) {\r\n                blocksArr[r][i].style.color = 'red';\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < 9; i++) {\r\n                    blocksArr[r][i].style.color = 'white';\r\n                }\r\n            }, 1000);\r\n            return false;\r\n        }\r\n        let isCol = true;\r\n        for (let i = 0; i < 9; i++) {\r\n            if (grid[i][c] == currNum) {\r\n                isCol = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!isCol) {\r\n            for (let i = 0; i < 9; i++) {\r\n                blocksArr[i][c].style.color = 'red';\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < 9; i++) {\r\n                    blocksArr[i][c].style.color = 'white';\r\n                }\r\n            }, 1000);\r\n            return false;\r\n        }\r\n        let isMat = true;\r\n        let x = Math.floor(r / 3) * 3;\r\n        let y = Math.floor(c / 3) * 3;\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                if (grid[i + x][j + y] == currNum) {\r\n                    isMat = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!isMat) {\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    blocksArr[i + x][j + y].style.color = \"red\";\r\n                }\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < 3; i++) {\r\n                    for (let j = 0; j < 3; j++) {\r\n                        blocksArr[i + x][j + y].style.color = \"white\";\r\n                    }\r\n                }\r\n            }, 1000);\r\n            return false;\r\n        }\r\n        let AllFilled = true;\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                if (grid[i][j] == 0) {\r\n                    AllFilled = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (AllFilled) {\r\n            props.setScore(-1);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"s-Block\" onClick={(e) => {\r\n            if (e.currentTarget.innerText === \"\") {\r\n                if (props.currNum) {\r\n                    let recAns = isValid(props.currNum);\r\n                    if (recAns) {\r\n                        let temp = props.puzzle.map((el) => {\r\n                            return el;\r\n                        })\r\n                        temp[props.idx] = props.currNum;\r\n                        props.setPuzzle(temp);\r\n                    }\r\n                    else {\r\n                        props.setScore(props.Score - 1);\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please Select A Number\");\r\n                }\r\n            }\r\n            else {\r\n                if (props.fixedPuzzle[props.idx] == 0) {\r\n                    let temp = props.puzzle.map((el) => {\r\n                        return el;\r\n                    })\r\n                    temp[props.idx] = 0;\r\n                    props.setPuzzle(temp);\r\n                }\r\n            }\r\n        }}>{props.value === 0 ? \"\" : props.value}</div>\r\n    )\r\n}\r\n\r\nexport default SudokuBlock;","let IndexBar = (props) => {\r\n    let arr = []\r\n    for (let i = 1; i <= 9; i++) {\r\n        arr.push(i);\r\n    }\r\n    return (\r\n        <div className={`${props.selector}`}>\r\n            {\r\n                arr.map((el) => {\r\n                    return (\r\n                        <div>{el}</div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default IndexBar;","import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: 'white',\r\n    background:\"none\"\r\n  },\r\n}));\r\n\r\nexport default function SimpleBackdrop() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Backdrop className={classes.backdrop} open={true}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nlet NumBar = (props) => {\r\n    let Arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    const [OldTarget, setOldTarget] = useState(undefined);\r\n    return (\r\n        <div className=\"numBar\">\r\n            {\r\n                Arr.map((el) => {\r\n                    return <div className=\"Sudokunum\" onClick={(e) => {\r\n                        if (OldTarget) {\r\n                            OldTarget.style.color = \"white\";\r\n                            OldTarget.style.backgroundColor = \"#31011f\"\r\n                        }\r\n                        setOldTarget(e.currentTarget);\r\n                        e.currentTarget.style.color = \"white\";\r\n                        e.currentTarget.style.backgroundColor = \"green\"\r\n                        props.setcurrNum(e.currentTarget.innerText);\r\n                    }}>{el}</div>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default NumBar;","import { useEffect, useState } from 'react';\r\nimport SudokuBlock from './SudokuBlock';\r\nimport IndexBar from './IndexBar';\r\nimport Loading from './Loading'\r\n// import \"./sudokuGrid.css\";\r\nimport NumBar from './NumBar';\r\nlet SudokuGrid = () => {\r\n    const [puzzle, setPuzzle] = useState([]);\r\n    const [fixedPuzzle, setfixedPuzzle] = useState([]);\r\n    const [currNum, setcurrNum] = useState(null);\r\n    const [Score, setScore] = useState(5);\r\n    const [Sol, setSol] = useState([]);\r\n    let i = -1;\r\n\r\n    let SolveSudoku = () => {\r\n        let blocks = document.querySelectorAll(\".s-Block\");\r\n        setPuzzle(Sol);\r\n        for (let i = 0; i < fixedPuzzle.length; i++) {\r\n            if (fixedPuzzle[i] == 0) blocks[i].style.color = \"green\";\r\n        }\r\n    }\r\n\r\n    let GenerateSudoku = (difficulty) => {\r\n        setPuzzle([]);\r\n        let blocks = document.querySelectorAll(\".s-Block\");\r\n        for (let i = 0; i < fixedPuzzle.length; i++) {\r\n            if (fixedPuzzle[i] == 0) blocks[i].style.color = \"white\";\r\n        }\r\n        let obj;\r\n        fetch(`https://sugoku.herokuapp.com/board?difficulty=${difficulty}`).then((data) => {\r\n            return data.json();\r\n        }).then((json) => {\r\n            let newArrr = [];\r\n            obj = json;\r\n            json = json.board;\r\n            for (let i = 0; i < json.length; i++) {\r\n                for (let j = 0; j < json[0].length; j++) {\r\n                    newArrr.push(json[i][j]);\r\n                }\r\n            }\r\n            setPuzzle(newArrr);\r\n            setfixedPuzzle(newArrr);\r\n        }).then(() => {\r\n\r\n            const encodeBoard = (board) => board.reduce((result, row, i) => result + `%5B${encodeURIComponent(row)}%5D${i === board.length - 1 ? '' : '%2C'}`, '')\r\n\r\n            const encodeParams = (params) =>\r\n                Object.keys(params)\r\n                    .map(key => key + '=' + `%5B${encodeBoard(params[key])}%5D`)\r\n                    .join('&');\r\n\r\n\r\n            const data = obj\r\n\r\n            fetch('https://sugoku.herokuapp.com/solve', {\r\n                method: 'POST',\r\n                body: encodeParams(data),\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\r\n            })\r\n                .then(response => response.json())\r\n                .then((json) => {\r\n                    let newArrr = [];\r\n                    json = json.solution;\r\n                    for (let i = 0; i < json.length; i++) {\r\n                        for (let j = 0; j < json[0].length; j++) {\r\n                            newArrr.push(json[i][j]);\r\n                        }\r\n                    }\r\n                    setSol(newArrr);\r\n                })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (Score == -1) {\r\n            alert(\"Congratulations!! You completed the puzzle. Starting a New Game\");\r\n            GenerateSudoku(\"easy\");\r\n            setScore(5);\r\n        }\r\n        if (Score == 0) {\r\n            alert(\"You ran out of Lives. Starting a New Game\");\r\n            GenerateSudoku(\"easy\");\r\n            setScore(5);\r\n        }\r\n    }, [Score]);\r\n\r\n    useEffect(() => {\r\n        GenerateSudoku(\"easy\");\r\n    }, []);\r\n    return (\r\n        <div className=\"SudokuBody\">\r\n            <div className=\"Sudokucontainer\">\r\n                <div className=\"clock\">\r\n                    <div>Lives: {Score}</div>\r\n                </div>\r\n                <div className=\"gridContainer\">\r\n                    <NumBar setcurrNum={setcurrNum} />\r\n                    <IndexBar selector={\"vertical\"} />\r\n                    {puzzle.length == 0 ? <div className=\"loading\"><Loading /></div> : <div className=\"s-Grid\">\r\n                        {\r\n                            puzzle.map((el) => {\r\n                                i++;\r\n                                return (<SudokuBlock value={el} puzzle={puzzle} setPuzzle={setPuzzle} idx={i} Score={Score} setScore={setScore} currNum={currNum} fixedPuzzle={fixedPuzzle} />)\r\n                            })\r\n                        }\r\n                    </div>}\r\n                    <IndexBar selector={\"horizontal\"} />\r\n                </div>\r\n                <div className=\"Sudokubuttons\">\r\n                    <div>Generate New Puzzle</div>\r\n                    <button onClick={() => {\r\n                        GenerateSudoku(\"easy\");\r\n                    }}>Easy</button>\r\n                    <button onClick={() => {\r\n                        GenerateSudoku(\"medium\");\r\n                    }}>Medium</button>\r\n                    <button onClick={() => {\r\n                        GenerateSudoku(\"hard\");\r\n                    }}>Hard</button>\r\n                    <button onClick={() => {\r\n                        let blocks = document.querySelectorAll(\".s-Block\");\r\n                        for (let i = 0; i < fixedPuzzle.length; i++) {\r\n                            if (fixedPuzzle[i] == 0) blocks[i].style.color = \"white\";\r\n                        }\r\n                        setScore(5);\r\n                        setPuzzle(fixedPuzzle);\r\n                    }}>Reset</button>\r\n                    <button onClick={() => {\r\n                        SolveSudoku();\r\n                    }}>Solve</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SudokuGrid;","import MainPage from \"./Home/MainPage\";\nimport TicTacToe from \"./TicTacToe/TicTacToe\";\nimport HiLow from './Hi-Low/HiLow';\nimport SudokuGrid from \"./Sudoku/SudokuGrid\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/sudoku\">\n          <SudokuGrid />\n        </Route>\n        <Route path=\"/HiLow\">\n          <HiLow />\n        </Route>\n        <Route path=\"/TicTacToe\">\n          <TicTacToe />\n        </Route>\n        <Route path=\"/\">\n          <MainPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n,  document.getElementById('root')\n);"],"sourceRoot":""}